1. Get the application URL by running these commands:
{{- if .Values.webapp.ingress.enabled }}
{{- range $host := .Values.webapp.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.webapp.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.webapp.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "nosqlbench-demo.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.webapp.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "nosqlbench-demo.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "nosqlbench-demo.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.webapp.service.port }}
{{- else if contains "ClusterIP" .Values.webapp.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "{{ include "nosqlbench-demo.selectorLabels" . }},app.kubernetes.io/component=webapp" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Next Steps - Configure Database Endpoints:

   ðŸ“Š Database Configuration:
   - Open the web interface above
   - Navigate to "Database Configuration" section
   - Add your database endpoints:
     â€¢ Cassandra (CQL driver)
     â€¢ OpenSearch (OpenSearch driver)
     â€¢ Presto/Trino (JDBC driver)
   - Test connectivity with built-in checker
   - Run workloads on verified databases

   ðŸ“ˆ Metrics Endpoint: {{ .Values.metrics.endpoint }}

   ðŸ”§ Auto-Setup: {{ if .Values.webapp.autoSetup }}Enabled{{ else }}Disabled{{ end }}

3. Available Features:
   - Dynamic database configuration through web UI
   - Fast connectivity checks (direct socket connections)
   - Real-time UI updates without page refreshes
   - Interactive benchmark controls with progress indicators
   - All workloads available (Cassandra SAI/LWT, OpenSearch, Presto)

4. Monitor the setup progress:
   kubectl --namespace {{ .Release.Namespace }} get jobs -l app.kubernetes.io/instance={{ .Release.Name }}
   kubectl --namespace {{ .Release.Namespace }} logs -l app.kubernetes.io/instance={{ .Release.Name }},job-type=setup

5. View running benchmarks:
   kubectl --namespace {{ .Release.Namespace }} get jobs -l app.kubernetes.io/instance={{ .Release.Name }},job-type=benchmark

For more information, visit the web interface once it's accessible.
