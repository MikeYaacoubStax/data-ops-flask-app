# Updated to use nosqlbench/nosqlbench:5.21.8-preview which includes OpenSearch and Presto/Trino drivers
# This eliminates the need for custom builds and local nb5 commands
# Restructured to run setup phases sequentially using depends_on with proper ordering

services:
  # NoSQLBench Setup - Cassandra SAI Schema
  nb-setup-cassandra-sai-schema:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-cassandra-sai-schema
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/cassandra-sai-schema:/logs
    environment:
      - CASSANDRA_HOST=${CASSANDRA_HOST:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_LOCALDC=${CASSANDRA_LOCALDC:-datacenter1}
    command: >
      --include=/workloads sai_longrun.yaml setup.schema
      driver=cql
      host=${CASSANDRA_HOST:-cassandra}
      port=${CASSANDRA_PORT:-9042}
      keyspace=sai_test
      localdc=${CASSANDRA_LOCALDC:-datacenter1}
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup

  # NoSQLBench Setup - Cassandra SAI Rampup
  nb-setup-cassandra-sai-rampup:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-cassandra-sai-rampup
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/cassandra-sai-rampup:/logs
    environment:
      - CASSANDRA_HOST=${CASSANDRA_HOST:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_LOCALDC=${CASSANDRA_LOCALDC:-datacenter1}
    command: >
      --include=/workloads sai_longrun.yaml setup.rampup
      driver=cql
      host=${CASSANDRA_HOST:-cassandra}
      port=${CASSANDRA_PORT:-9042}
      keyspace=sai_test
      localdc=${CASSANDRA_LOCALDC:-datacenter1}
      threads=auto
      cycles=10000
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-cassandra-sai-schema:
        condition: service_completed_successfully

  # NoSQLBench Setup - Cassandra LWT Schema
  nb-setup-cassandra-lwt-schema:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-cassandra-lwt-schema
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/cassandra-lwt-schema:/logs
    environment:
      - CASSANDRA_HOST=${CASSANDRA_HOST:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_LOCALDC=${CASSANDRA_LOCALDC:-datacenter1}
    command: >
      --include=/workloads lwt_longrun.yaml setup.schema
      driver=cql
      host=${CASSANDRA_HOST:-cassandra}
      port=${CASSANDRA_PORT:-9042}
      keyspace=lwt_ks
      localdc=${CASSANDRA_LOCALDC:-datacenter1}
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup

  # NoSQLBench Setup - Cassandra LWT Truncating
  nb-setup-cassandra-lwt-truncating:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-cassandra-lwt-truncating
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/cassandra-lwt-truncating:/logs
    environment:
      - CASSANDRA_HOST=${CASSANDRA_HOST:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_LOCALDC=${CASSANDRA_LOCALDC:-datacenter1}
    command: >
      --include=/workloads lwt_longrun.yaml setup.truncating
      driver=cql
      host=${CASSANDRA_HOST:-cassandra}
      port=${CASSANDRA_PORT:-9042}
      keyspace=lwt_ks
      localdc=${CASSANDRA_LOCALDC:-datacenter1}
      threads=1
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-cassandra-lwt-schema:
        condition: service_completed_successfully

  # NoSQLBench Setup - Cassandra LWT Sharding
  nb-setup-cassandra-lwt-sharding:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-cassandra-lwt-sharding
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/cassandra-lwt-sharding:/logs
    environment:
      - CASSANDRA_HOST=${CASSANDRA_HOST:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_LOCALDC=${CASSANDRA_LOCALDC:-datacenter1}
    command: >
      --include=/workloads lwt_longrun.yaml setup.sharding
      driver=cql
      host=${CASSANDRA_HOST:-cassandra}
      port=${CASSANDRA_PORT:-9042}
      keyspace=lwt_ks
      localdc=${CASSANDRA_LOCALDC:-datacenter1}
      threads=8
      cycles=80
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-cassandra-lwt-truncating:
        condition: service_completed_successfully

  # NoSQLBench Setup - Cassandra LWT Load
  nb-setup-cassandra-lwt-load:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-cassandra-lwt-load
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/cassandra-lwt-load:/logs
    environment:
      - CASSANDRA_HOST=${CASSANDRA_HOST:-cassandra}
      - CASSANDRA_PORT=${CASSANDRA_PORT:-9042}
      - CASSANDRA_LOCALDC=${CASSANDRA_LOCALDC:-datacenter1}
    command: >
      --include=/workloads lwt_longrun.yaml setup.lwt_load
      driver=cql
      host=${CASSANDRA_HOST:-cassandra}
      port=${CASSANDRA_PORT:-9042}
      keyspace=lwt_ks
      localdc=${CASSANDRA_LOCALDC:-datacenter1}
      threads=auto
      cycles=100000
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-cassandra-lwt-sharding:
        condition: service_completed_successfully

  # NoSQLBench Setup - OpenSearch Basic Pre-cleanup
  nb-setup-opensearch-basic-precleanup:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-basic-precleanup
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-basic-precleanup:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_basic_longrun.yaml default.pre_cleanup
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup

  # NoSQLBench Setup - OpenSearch Basic Schema
  nb-setup-opensearch-basic-schema:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-basic-schema
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-basic-schema:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_basic_longrun.yaml default.schema
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-opensearch-basic-precleanup:
        condition: service_completed_successfully

  # NoSQLBench Setup - OpenSearch Basic Rampup
  nb-setup-opensearch-basic-rampup:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-basic-rampup
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-basic-rampup:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_basic_longrun.yaml default.rampup
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      threads=10
      cycles=1000
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-opensearch-basic-schema:
        condition: service_completed_successfully

  # NoSQLBench Setup - OpenSearch Vector Pre-cleanup
  nb-setup-opensearch-vector-precleanup:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-vector-precleanup
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-vector-precleanup:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_vector_search_longrun.yaml default.pre_cleanup
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup

  # NoSQLBench Setup - OpenSearch Vector Schema
  nb-setup-opensearch-vector-schema:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-vector-schema
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-vector-schema:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_vector_search_longrun.yaml default.schema
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-opensearch-vector-precleanup:
        condition: service_completed_successfully

  # NoSQLBench Setup - OpenSearch Vector Rampup
  nb-setup-opensearch-vector-rampup:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-vector-rampup
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-vector-rampup:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_vector_search_longrun.yaml default.rampup
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      threads=5
      cycles=1000
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-opensearch-vector-schema:
        condition: service_completed_successfully

  # NoSQLBench Setup - OpenSearch Bulk Pre-cleanup
  nb-setup-opensearch-bulk-precleanup:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-bulk-precleanup
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-bulk-precleanup:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_bulk_longrun.yaml default.pre_cleanup
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup

  # NoSQLBench Setup - OpenSearch Bulk Schema
  nb-setup-opensearch-bulk-schema:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-bulk-schema
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-bulk-schema:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_bulk_longrun.yaml default.schema
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-opensearch-bulk-precleanup:
        condition: service_completed_successfully

  # NoSQLBench Setup - OpenSearch Bulk Load
  nb-setup-opensearch-bulk-load:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-opensearch-bulk-load
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/opensearch-bulk-load:/logs
    environment:
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-opensearch}
      - OPENSEARCH_PORT=${OPENSEARCH_PORT:-9200}
    command: >
      --include=/workloads opensearch_bulk_longrun.yaml default.bulk_load
      driver=opensearch
      host=${OPENSEARCH_HOST:-opensearch}
      port=${OPENSEARCH_PORT:-9200}
      threads=5
      cycles=10000
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-opensearch-bulk-schema:
        condition: service_completed_successfully

  # NoSQLBench Setup - Presto Analytics Drop
  nb-setup-presto-analytics-drop:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-presto-analytics-drop
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/presto-analytics-drop:/logs
    environment:
      - PRESTO_HOST=${PRESTO_HOST:-presto}
      - PRESTO_PORT=${PRESTO_PORT:-8080}
      - PRESTO_USER=${PRESTO_USER:-testuser}
    command: >
      --include=/workloads jdbc_analytics_longrun.yaml default.drop
      dburl=jdbc:presto://${PRESTO_HOST:-presto}:${PRESTO_PORT:-8080}/memory?user=${PRESTO_USER:-testuser}
      use_hikaricp=true
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup

  # NoSQLBench Setup - Presto Analytics Schema
  nb-setup-presto-analytics-schema:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-presto-analytics-schema
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/presto-analytics-schema:/logs
    environment:
      - PRESTO_HOST=${PRESTO_HOST:-presto}
      - PRESTO_PORT=${PRESTO_PORT:-8080}
      - PRESTO_USER=${PRESTO_USER:-testuser}
    command: >
      --include=/workloads jdbc_analytics_longrun.yaml default.schema
      dburl=jdbc:presto://${PRESTO_HOST:-presto}:${PRESTO_PORT:-8080}/memory?user=${PRESTO_USER:-testuser}
      use_hikaricp=true
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-presto-analytics-drop:
        condition: service_completed_successfully

  # NoSQLBench Setup - Presto Analytics Rampup
  nb-setup-presto-analytics-rampup:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-presto-analytics-rampup
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/presto-analytics-rampup:/logs
    environment:
      - PRESTO_HOST=${PRESTO_HOST:-presto}
      - PRESTO_PORT=${PRESTO_PORT:-8080}
      - PRESTO_USER=${PRESTO_USER:-testuser}
    command: >
      --include=/workloads jdbc_analytics_longrun.yaml default.rampup
      dburl=jdbc:presto://${PRESTO_HOST:-presto}:${PRESTO_PORT:-8080}/memory?user=${PRESTO_USER:-testuser}
      use_hikaricp=true
      threads=10
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-presto-analytics-schema:
        condition: service_completed_successfully

  # NoSQLBench Setup - Presto E-commerce Drop
  nb-setup-presto-ecommerce-drop:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-presto-ecommerce-drop
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/presto-ecommerce-drop:/logs
    environment:
      - PRESTO_HOST=${PRESTO_HOST:-presto}
      - PRESTO_PORT=${PRESTO_PORT:-8080}
      - PRESTO_USER=${PRESTO_USER:-testuser}
    command: >
      --include=/workloads jdbc_ecommerce_longrun.yaml default.drop
      dburl=jdbc:presto://${PRESTO_HOST:-presto}:${PRESTO_PORT:-8080}/memory?user=${PRESTO_USER:-testuser}
      use_hikaricp=true
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup

  # NoSQLBench Setup - Presto E-commerce Schema
  nb-setup-presto-ecommerce-schema:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-presto-ecommerce-schema
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/presto-ecommerce-schema:/logs
    environment:
      - PRESTO_HOST=${PRESTO_HOST:-presto}
      - PRESTO_PORT=${PRESTO_PORT:-8080}
      - PRESTO_USER=${PRESTO_USER:-testuser}
    command: >
      --include=/workloads jdbc_ecommerce_longrun.yaml default.schema
      dburl=jdbc:presto://${PRESTO_HOST:-presto}:${PRESTO_PORT:-8080}/memory?user=${PRESTO_USER:-testuser}
      use_hikaricp=true
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-presto-ecommerce-drop:
        condition: service_completed_successfully

  # NoSQLBench Setup - Presto E-commerce Rampup
  nb-setup-presto-ecommerce-rampup:
    image: nosqlbench/nosqlbench:5.21.8-preview
    container_name: nb-setup-presto-ecommerce-rampup
    volumes:
      - ../demo_workloads:/workloads
      - ../results:/results
      - ../logs/presto-ecommerce-rampup:/logs
    environment:
      - PRESTO_HOST=${PRESTO_HOST:-presto}
      - PRESTO_PORT=${PRESTO_PORT:-8080}
      - PRESTO_USER=${PRESTO_USER:-testuser}
    command: >
      --include=/workloads jdbc_ecommerce_longrun.yaml default.rampup
      dburl=jdbc:presto://${PRESTO_HOST:-presto}:${PRESTO_PORT:-8080}/memory?user=${PRESTO_USER:-testuser}
      use_hikaricp=true
      threads=5
      errors=count
    network_mode: host
    restart: "no"
    profiles:
      - setup
    depends_on:
      nb-setup-presto-ecommerce-schema:
        condition: service_completed_successfully
